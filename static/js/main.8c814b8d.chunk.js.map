{"version":3,"sources":["components/Navbar.js","components/Card.js","App.js","serviceWorker.js","index.js"],"names":["BootstrapNavbar","props","useState","isOpen","setIsOpen","Navbar","color","light","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","NavLink","Example","alt","title","src","image","subtitle","text","Button","onClickEdit","onClickDelete","App","toggle","setToggle","cardEdit","setCardEdit","newItem","setNewItem","index","id","objects","setObjects","useEffect","data","localStorage","getItem","JSON","parse","setItem","stringify","cards","map","card","Card","key","arrayIndex","_","findIndex","cardContent","console","log","dispatch","type","payload","inmutable","remove","formShow","onChange","e","target","name","value","onSubmit","preventDefault","randomNumber","Math","floor","random","itemToPush","nextId","useReducer","state","action","Error","Container","style","paddingTop","length","display","Form","FormGroup","Label","for","Input","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8c814b8d.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n } from 'reactstrap';\r\n\r\nconst BootstrapNavbar = (props) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const toggle = () => setIsOpen(!isOpen);\r\n\r\n  return (\r\n    <div>\r\n      <Navbar color=\"light\" light expand=\"md\">\r\n        <NavbarBrand href=\"/\">challenge</NavbarBrand>\r\n        <NavbarToggler onClick={toggle} />\r\n        <Collapse isOpen={isOpen} navbar>\r\n          <Nav className=\"ml-auto\" navbar>\r\n            <NavItem>\r\n              <NavLink href=\"https://martin2844.github.io/gatsby-cv-site/\">About Me</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink href=\"https://github.com/martin2844\">GitHub</NavLink>\r\n            </NavItem>\r\n          </Nav>\r\n        </Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BootstrapNavbar;","import React from 'react';\r\nimport './card.scss';\r\n\r\nimport {Button} from 'reactstrap';\r\n\r\n\r\n\r\nconst Example = (props) => {\r\n\r\n\r\n  return (\r\n   \r\n\r\n\r\n            <div className='card-body'>\r\n            <div className='card-top'>\r\n            <img alt={props.title} className='card-image' src={props.image} />\r\n            </div>\r\n            <div className='card-bottom'>\r\n            <h1 className='card-title'>{props.title}</h1>\r\n            <p className='card-subtitle'>{props.subtitle}</p>\r\n            <p className='card-desc'>{props.text}</p>\r\n            \r\n            <Button onClick={props.onClickEdit} className='card-buttons' color=\"info\">Edit</Button>\r\n           \r\n            \r\n            <Button onClick={props.onClickDelete} className='card-buttons' color=\"danger\">Delete</Button>\r\n            \r\n            </div>\r\n            </div>\r\n\r\n\r\n  \r\n        \r\n    \r\n    \r\n  );\r\n};\r\n\r\nexport default Example;","import React, {useState, useEffect, useReducer} from 'react';\nimport {Container, Button, Form, FormGroup, Label, Input} from 'reactstrap';\n\n//delete handling\nimport _ from \"lodash\";\nimport nextId from \"react-id-generator\";\n\nimport BootstrapNavbar from './components/Navbar';\nimport Card from './components/Card';\nimport './bootstrap.min.css';\n\n\nfunction App() {\n  \n  \n\n  const hidden = {\n    display: 'none'\n  }\n\n  const shown = {\n    display: 'block'\n  }\n\n\n  const [toggle, setToggle] = useState(true);\n  const [cardEdit, setCardEdit] = useState(false);\n\n  \n\n  const [newItem, setNewItem] = useState({\n    title: '',\n    subtitle: '',\n    text:'',\n    image: ''\n  })\n\n  //destructure values\n  const {title, subtitle, text, image, index} = newItem;\n  \n\n \n\n  //just a padding object for main container\n  const containerStyle = {\n    paddingTop: '1rem'\n  }\n  \n\n  //main item array, will not use a DB, just an array of items that will store it in local memory.\n\n  const items = [{\n    title: \"Towel\",\n    subtitle: \"subtitle 1\",\n    text: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. \",\n    image: './images/towel.jpg',\n    id: 1\n  },\n  {\n    title: \"Candle\",\n    subtitle: \"subtitle 2\",\n    text: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. \",\n    image: './images/candle.jpg',\n    id: 2\n  },\n  {\n    title: \"Oil\",\n    subtitle: \"subtitle 3\",\n    text: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. \",\n    image: './images/oil.jpg',\n    id: 3\n  },\n  {\n    title: \"Fragrances\",\n    subtitle: \"subtitle 4\",\n    text: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. \",\n    image: './images/fragrances.jpg',\n    id: 4\n  },\n  {\n    title: \"Lotion\",\n    subtitle: \"subtitle 5\",\n    text: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\",\n    image: './images/lotion.jpg',\n    id: 5\n  },\n]\n\n//set Items to state\nconst [objects, setObjects] = useState(items);\n\n\nuseEffect(() => {\n\n  const data = localStorage.getItem('local-items');\n  if (data) {\n\n    setObjects(JSON.parse(data));\n\n  }\n\n  \n\n},[])\n\nuseEffect(() => {\n\n  localStorage.setItem('local-items', JSON.stringify(objects));\n\n})\n\n\n\n//map of items array to show on container. Passes the items properties as props to the Card component\nconst cards = objects.map((card) => {\n  \n  function handleDelete() {\n    \n  let inmutable = objects;\n  _.remove(inmutable, {\n    id: card.id\n  })\n  console.log(inmutable);\n\n  dispatch({type: 'DELETE', payload: inmutable });\n}\n\nfunction handleEdit(){\n \n  let arrayIndex = _.findIndex(objects, {id: card.id});\n\n  let cardContent = {\n    title: card.title,\n    subtitle: card.subtitle,\n    text: card.text,\n    image: card.image,\n    id: card.id,\n    index: arrayIndex\n    }\n\n\n\n console.log(arrayIndex);\n\ndispatch({type: 'EDIT', payload: cardContent });\n\n}\n  \n\n return (\n   \n    <Card key={card.id} onClickEdit={handleEdit} onClickDelete={handleDelete} title={card.title} subtitle={card.subtitle} image={card.image} text={card.text}/>\n  )\n\n})\n\n\n\nconsole.log(newItem);\n\n//toggler to show the form to add new Item\nfunction formShow() {\n  toggle ? setToggle(false) : setToggle(true);\n  setCardEdit(false);\n  setNewItem({\n    title: '',\n    subtitle: '',\n    text:'',\n    image: ''\n  });\n\n}\n\n// function for setting state of the new Item to add.\nconst onChange = e => {setNewItem({...newItem, [e.target.name]: e.target.value })}\n\n\n\n// function for submiting the new item to add.\nconst onSubmit = e => {\n  e.preventDefault();\n  //destructure state\n  \n  if(cardEdit) {\n\n    \n\n    let inmutable = objects;\n\n    \n\n    inmutable[index].title = title;\n    inmutable[index].subtitle = subtitle;\n    inmutable[index].text = text;\n    inmutable[index].image = image;\n\n    console.log(inmutable);\n\n    dispatch({type: 'UPDATE', payload: inmutable });\n\n\n  } else {\n    let randomNumber = Math.floor(Math.random()*10);\n    let imageNumber = 'https://unsplash.it/150/200?image=' + randomNumber\n    const itemToPush = {\n\n      title: title,\n      subtitle: subtitle,\n      text: text,\n      image: imageNumber || './images/lotion.jpg',\n      id: nextId()\n  \n    }\n  \n    setObjects([...objects, itemToPush]);\n    setNewItem({\n      title: '',\n      subtitle: '',\n      text:'',\n      image: ''\n    });\n    setToggle(true);\n  \n\n  }\n \n\n  \n\n}\n\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"DELETE\": {\n      setObjects(action.payload);\n      setNewItem({\n        title: '',\n        subtitle: '',\n        text:'',\n        image: ''\n      });\n      break;\n    }\n    case \"EDIT\": {\n      console.log(action.payload);\n      setNewItem(action.payload);\n      setToggle(false);\n      setCardEdit(true);\n      break;\n  }\n    case \"UPDATE\": {\n     console.log(action.payload);\n     setObjects(action.payload);\n     setNewItem({\n      title: '',\n      subtitle: '',\n      text:'',\n      image: ''\n    });\n    setToggle(true);\n    setCardEdit(false);\n    break;\n    }\n    default:\n      throw new Error(\"Bad Action Type\")\n      \n  }\n}\n\nconst [state, dispatch] = useReducer(reducer, objects);\n\nconsole.log(state)\n\n  return (\n    <div className=\"App\">\n\n      <BootstrapNavbar/>\n      <Container style={containerStyle}> \n\n        <h1>Welcome to SPA app</h1>\n        <p className='main-subtitle'>Proudly done on react.</p>\n        <p>There are currently {objects.length} items</p>\n        <Button color='success' onClick={() => formShow()}> Add Item</Button>\n\n        {/* form container */}\n        <Container style={toggle ? hidden : shown}>\n\n        <Form onSubmit={e => onSubmit(e)}>\n\n      <FormGroup>\n        <Label for=\"Title\">Title</Label>\n        <Input onChange={e => onChange(e)} value={title}  type=\"Title\" name=\"title\" id=\"Title\" placeholder=\"Put title for item\" />\n      </FormGroup>\n      <FormGroup>\n        <Label for=\"Subtitle\">Subtitle</Label>\n        <Input onChange={e => onChange(e)} value={subtitle} type=\"Subtitle\" name=\"subtitle\" id=\"Subtitle\" placeholder=\"Put subtitle for item\" />\n      </FormGroup>\n      <FormGroup>\n      <Label for=\"Description\">Description</Label>\n        <Input onChange={e => onChange(e)}  value={text}  type=\"Description\" name=\"text\" id=\"Description\" />\n        </FormGroup>\n        <FormGroup>\n          <Input type='file' name='image'/>\n        </FormGroup>\n      </Form>\n      <Button className='card-buttons' color={cardEdit ? 'warning' : 'primary' } onClick={e => onSubmit(e)}>{cardEdit ? 'Update' : 'Submit' }</Button>\n      <Button className='card-buttons' color='danger' onClick={() => formShow()}>Close </Button>\n        </Container>\n        <Container>\n        <div className='card-main wrap'>\n        {cards}\n        </div>\n        </Container>\n      </Container>\n    \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}